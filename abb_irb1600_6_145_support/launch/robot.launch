<launch>
  <!-- because there are multiple machines we are going to use sim time <3 -->
  <!-- <param name="/use_sim_time" value="true" /> -->
  <!-- The planning and execution components of MoveIt! configured to run -->
  <!-- using the ROS-Industrial interface. -->
 
  <!-- Load Joint Names -->
  <rosparam command="load" file="$(find abb_irb1600_6_145_support)/config/joint_names_irb1600_6_145.yaml" />
 
  <!-- the "sim" argument controls whether we connect to a Simulated or Real robot -->
  <!--  - if sim=false, a robot_ip argument is required -->
  <arg name="sim" default="false" />
  <arg name="robot_ip" unless="$(arg sim)" default="192.168.100.100"/>

  <!-- load the robot_description parameter before launching ROS-I nodes -->
  <include file="$(find abb_irb1600_6_145_support)/launch/planning_context.launch" >
    <arg name="load_robot_description" value="true" />
  </include>

  <!-- run the robot simulator and action interface nodes -->
  <group if="$(arg sim)">
    <include file="$(find industrial_robot_simulator)/launch/robot_interface_simulator.launch" />
  </group>

  <!-- run the "real robot" interface nodes -->
  <!--   - this typically includes: robot_state, motion_interface, and joint_trajectory_action nodes -->
  <!--   - replace these calls with appropriate robot-specific calls or launch files -->
  <group unless="$(arg sim)">
    <include file="$(find abb_irb1600_6_145_support)/launch/robot_interface_download_irb1600_6_145.launch" >
      <arg name="robot_ip" value="$(arg robot_ip)"/>
    </include>
  </group>

  <!-- publish the robot state (tf transforms) -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />

  <include file="$(find abb_irb1600_6_145_support)/launch/move_group.launch">
    <arg name="publish_monitored_planning_scene" value="true" />
  </include>

  <!-- <include file="$(find abb_irb1600_6_12_moveit_config)/launch/moveit_rviz.launch">
    <arg name="config" value="true"/>
  </include> -->

  <!-- load the text target sender -->
  <!-- <node name="MMM_joint_sender" pkg="MMM_joint_sender" type="MMM_joint_sender.py" output="screen"/> -->

  <!-- Try and launch the camra on the pi -->
  
  <!-- <machine
          name="pi"
          address="192.168.100.105"
          env-loader="/opt/ros/fuerte/env.sh"
  />
  <include machine="pi" file="/opt/ros/kinetic/share/realsense2_camera/launch/mmm_mqp.launch" />
  -->

  <!-- connect the camra tf to the robot --> 
  <node pkg="tf" type="static_transform_publisher" name="World_Camera" args="0 0 0 0 0 0 tool0 camera_link 100"/>
 
</launch>
